/* 
 * File:   GLCD.h
 * Author: student
 *
 * Created on 24. novembar 2022., 17.53
 */

#if defined(__dsPIC30F__)

#include<p30fxxxx.h>

#endif

#ifndef driverGLCD.h
#define driverGLCD.h

#include "Tajmeri.h"
#include<p30fxxxx.h>
#include "timer1.h"
#include <stdlib.h>

/* LCD Registers */
#define PAGE_ADRESS	0xB8	/* Adress base for Page 0 */
#define Y_ADRESS	0x40	/* Adress base for Y0	  bilo 40*/
#define START_LINE	0xC0	/* Adress base for line 0 */
#define DISPLAY_ON	0x3F	/* Turn display on	  */
#define DISPLAY_OFF	0x3E	/* Turn display off	  */

/* General use definitions */
#define RIGHT		0
#define LEFT		1
#define BUSY		0x80

#define FONT_LENGHT 5
#define FONT_LENGHT_BIG 16

#define odnos_pravougaonosti_piksela		1.3

#define output 0//koristi se kod definisanja pravca pina ulazni ili izlazni
#define input 1

#define RF5_1 LATF|=0b0000000000100000;//RST
#define RF5_0 LATF&=0b1111111111011111;

#define RF4_1 LATF|=0b0000000000010000;//E
#define RF4_0 LATF&=0b1111111111101111;

#define RF1_1 LATF|=0b0000000000000010;//RW
#define RF1_0 LATF&=0b1111111111111101;

#define RF0_1 LATF|=0b0000000000000001;//RS
#define RF0_0 LATF&=0b1111111111111110;

#define RB5_1 LATB|=0b0000000000100000;//CS2
#define RB5_0 LATB&=0b1111111111011111;

#define RB4_1 LATB|=0b0000000000010000;//CS1
#define RB4_0 LATB&=0b1111111111101111;


//#define Nop() {__asm__ volatile ("nop");}

//#define xtal 29480000
#define xtal 25000000

//unsigned char kursorX=0;
//unsigned char kursorY=0;
//unsigned char strana=0;

/*const char DISPLAY1_bmp[1024] = {
 255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255, 
 255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255, 
 255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255, 
 255,255,255,255,127,127,127,127,127,127,127,127,127,127,127,127, 
 127,127,127,127,127,127,127, 63, 31, 31, 31, 31, 31, 31, 31, 31, 
  31,223,255,255,255,255,255,255,255,255,255,255,255,255,255,255, 
 255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255, 
 255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255, 
 255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255, 
 255,255,255,255,255,255,255,255,255,127,127,127, 31, 31, 31, 31, 
  15, 15,  7,  7,  7,  3,  3,  3,  3,  3,  3,  1,  1,  0,  0,  0, 
   0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
   0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
   1,  3,  3,  3,  3,  3,  7,  7,  7, 15, 15, 15, 31, 31, 63,127, 
 127,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255, 
 255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255, 
 255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255, 
  63, 31, 15, 15,  7,  7,  1,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
   0,  0,  0,  0,  0,  0,  0,  0,  0,  0,128,128,128,192,192,224, 
 224,224,224,240,240,240,240,240,248,248,248,120, 56, 24,  0,  0, 
   0,  0,  0,  0,  0,  0,  0,224,240,224,224,224,192,192,192,128, 
 128,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
   0,  0,  0,  0,  0,  3,  7, 15, 15, 31, 31,127,255,255,255,255, 
 255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255, 
 255,255,255,255,255,255,255,255,255,255,255,255,255, 63, 15,  1, 
   0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
   0,  0,  0,192,240,248,248,252,255,255,255,255,255,255,255,255, 
 255,255,255,255,127, 63, 31, 31,  7,  3,  3,  0,  0,  0,  0,  0, 
   0,  0,  4,  4,  6,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7, 
   7,  7,  6,  6,  6,  0,  0,  0,  0,  4,  4,  4,  4,  4,  0,  0, 
   0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1, 31,255,255, 
 255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255, 
 255,255,255,255,255,255,255,255,255,255,255,255,255,248,128,  0, 
   0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
   0,  0,  0,  7, 63,127,127,255,255,255,255,255,255,255,255,127, 
 127, 63, 15,  3,  0,  0,  0,  0,  0,  0,  0,128, 32, 24, 12, 15, 
  15, 15, 15, 15, 15, 15, 15, 15,  7,  3,  0,  0,  0,  0,  0,  0, 
 128,192,248,254,254,127, 31, 31,  7,224,252,255,255,255, 31,  3, 
   3,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,192,255,255, 
 255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255, 
 255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255, 
 248,224,192,192,128,128,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
   0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  3,  7,  7,  3,  0,  0, 
   0,  0,  0,  0,128, 32, 48, 48,124,126,126,126,126,126,126,126, 
  30,  6,  2,  2,  0,  0,  0,  0,  0,  0,  0,128,200,200,230,231, 
 243,243,121,124,124, 60, 31, 31, 31,  7,  3,  3,  1,  0,  0,  0, 
   0,  0,  0,  0,  0,  0,128,128,224,224,224,248,254,255,255,255, 
 255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255, 
 255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255, 
 255,255,255,255,255,255,254,254,252,252,248,248,240,240,240,224, 
 224,192,192,192,128,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
   0,  0,  0,  0,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  3,  0, 
   0,  0,  0,  0,  0,  0,  0,  0,  0,  2,  3,  1,  1,  1,  1,  0, 
   0,  0,  0,  0,  0,  0,128,128,192,192,224,224,224,240,240,248, 
 248,252,252,252,254,255,255,255,255,255,255,255,255,255,255,255, 
 255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255, 
 255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255, 
 255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255, 
 255,255,255,255,255,255,255,255,255,255,254,254,254,254,252,252, 
 252,252,252,252,252,252,224,224,224,224,224,224,224,224,240,248, 
 248,248,252,252,252,252,252,252,252,252,252,252,252,252,254,254, 
 254,254,255,255,255,255,255,255,255,255,255,255,255,255,255,255, 
 255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255, 
 255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255 
};

const  char fontBIG[] = {
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00  , // space
 0x00, 0x00, 0x3E, 0xFF, 0xFF, 0x3E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0D, 0x0D, 0x00, 0x00, 0x00  , // ! 
 0x00, 0x04, 0x07, 0x03, 0x00, 0x04, 0x07, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00  , // "
 0x10, 0xFE, 0xFE, 0x10, 0x10, 0xFE, 0xFE, 0x10, 0x01, 0x0F, 0x0F, 0x01, 0x01, 0x0F, 0x0F, 0x01  , // #
 0x1C, 0x3E, 0x22, 0xFF, 0xFF, 0x42, 0xCE, 0x8C, 0x03, 0x07, 0x04, 0x0F, 0x0F, 0x04, 0x07, 0x03  , // $
 0x00, 0x00, 0x06, 0xC6, 0xF0, 0x3C, 0x0E, 0x02, 0x00, 0x04, 0x07, 0x03, 0x00, 0x06, 0x06, 0x00  , // %
 0x1E, 0x3F, 0xE1, 0xC1, 0x41, 0x21, 0x3F, 0x1E, 0x06, 0x0F, 0x09, 0x09, 0x0B, 0x0C, 0x1E, 0x16  , // &
 0x00, 0x00, 0x04, 0x07, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00  , // '
 0x00, 0x00, 0xF8, 0xFE, 0x07, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x0E, 0x08, 0x00, 0x00  , // (
 0x00, 0x00, 0x01, 0x07, 0xFE, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x08, 0x0E, 0x07, 0x01, 0x00, 0x00  , // )
 0x20, 0xA8, 0xF8, 0x70, 0x70, 0xF8, 0xA8, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00  , // *
 0x20, 0x20, 0x20, 0xFC, 0xFC, 0x20, 0x20, 0x20, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x00  , // +
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x3C, 0x1C, 0x00, 0x00, 0x00  , // ,
 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00  , // -
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0C, 0x0C, 0x00, 0x00, 0x00  , // .
 0x00, 0x00, 0x00, 0xC0, 0xF0, 0x3C, 0x0F, 0x03, 0x00, 0x0C, 0x0F, 0x03, 0x00, 0x00, 0x00, 0x00  , // /
 0xFE, 0xFF, 0x01, 0x01, 0x01, 0x01, 0xFF, 0xFE, 0x07, 0x0F, 0x08, 0x08, 0x08, 0x08, 0x0F, 0x07  , // 0
 0x00, 0x04, 0x06, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x08, 0x08, 0x0F, 0x0F, 0x08, 0x08, 0x00  , // 1
 0x02, 0x03, 0x81, 0xC1, 0x61, 0x31, 0x1F, 0x0E, 0x0E, 0x0F, 0x09, 0x08, 0x08, 0x08, 0x08, 0x0C  , // 2
 0x02, 0x03, 0x01, 0x21, 0x21, 0x21, 0xFF, 0xDE, 0x04, 0x0C, 0x08, 0x08, 0x08, 0x08, 0x0F, 0x07  , // 3
 0xE0, 0xF0, 0x98, 0x8C, 0x86, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x0F, 0x0F, 0x08  , // 4  
 0x3F, 0x3F, 0x21, 0x21, 0x21, 0x21, 0xE1, 0xC1, 0x04, 0x0C, 0x08, 0x08, 0x08, 0x08, 0x0F, 0x07  , // 5
 0xFC, 0xFE, 0x23, 0x21, 0x21, 0x21, 0xE0, 0xC0, 0x07, 0x0F, 0x08, 0x08, 0x08, 0x08, 0x0F, 0x07  , // 6
 0x03, 0x03, 0x01, 0x81, 0xE1, 0x79, 0x1F, 0x07, 0x00, 0x00, 0x00, 0x0F, 0x0F, 0x00, 0x00, 0x00  , // 7
 0xDE, 0xFF, 0x21, 0x21, 0x21, 0x21, 0xFF, 0xDE, 0x07, 0x0F, 0x08, 0x08, 0x08, 0x08, 0x0F, 0x07  , // 8
 0x1E, 0x3F, 0x21, 0x21, 0x21, 0x21, 0xFF, 0xFE, 0x00, 0x08, 0x08, 0x08, 0x08, 0x0C, 0x07, 0x03  , // 9
 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x06, 0x00, 0x00, 0x00  , // :
 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x1E, 0x0E, 0x00, 0x00, 0x00  , // ;
 0x40, 0xE0, 0xB0, 0x18, 0x0C, 0x06, 0x02, 0x00, 0x00, 0x00, 0x01, 0x03, 0x06, 0x0C, 0x08, 0x00  , // <
 0x00, 0xA0, 0xA0, 0xA0, 0xA0, 0xA0, 0xA0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00  , // =
 0x00, 0x02, 0x06, 0x0C, 0x18, 0xB0, 0xE0, 0x40, 0x00, 0x08, 0x0C, 0x06, 0x03, 0x01, 0x00, 0x00  , // >
 0x02, 0x03, 0x01, 0xC1, 0xE1, 0x31, 0x1F, 0x0E, 0x00, 0x00, 0x00, 0x0D, 0x0D, 0x00, 0x00, 0x00  , // ?
 0x02, 0x03, 0x01, 0xC1, 0xE1, 0x31, 0x1F, 0x0E, 0x00, 0x00, 0x00, 0x0D, 0x0D, 0x00, 0x00, 0x00  , // @
 0xF8, 0xFC, 0x86, 0x83, 0x83, 0x86, 0xFC, 0xF8, 0x0F, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x0F  , // A
 0xFF, 0xFF, 0x21, 0x21, 0x21, 0x21, 0xFF, 0xDE, 0x0F, 0x0F, 0x08, 0x08, 0x08, 0x08, 0x0F, 0x07  , // B
 0xFC, 0xFE, 0x03, 0x01, 0x01, 0x01, 0x03, 0x06, 0x03, 0x07, 0x0C, 0x08, 0x08, 0x08, 0x0C, 0x06  , // C
 0x01, 0xFF, 0xFF, 0x01, 0x01, 0x03, 0xFE, 0xFC, 0x08, 0x0F, 0x0F, 0x08, 0x08, 0x0C, 0x07, 0x03  , // D
 0x01, 0xFF, 0xFF, 0x21, 0x21, 0x71, 0x03, 0x03, 0x08, 0x0F, 0x0F, 0x08, 0x08, 0x08, 0x0C, 0x0C  , // E
 0x01, 0xFF, 0xFF, 0x21, 0x21, 0x71, 0x03, 0x03, 0x08, 0x0F, 0x0F, 0x08, 0x00, 0x00, 0x00, 0x00  , // F
 0xFC, 0xFE, 0x03, 0x01, 0x41, 0x41, 0xC3, 0xC6, 0x03, 0x07, 0x0C, 0x08, 0x08, 0x08, 0x07, 0x0F  , // G
 0xFF, 0xFF, 0x20, 0x20, 0x20, 0x20, 0xFF, 0xFF, 0x0F, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x0F  , // H
 0x00, 0x01, 0x01, 0xFF, 0xFF, 0x01, 0x01, 0x00, 0x00, 0x08, 0x08, 0x0F, 0x0F, 0x08, 0x08, 0x00  , // I
 0x00, 0x00, 0x00, 0x00, 0x01, 0xFF, 0xFF, 0x01, 0x06, 0x0E, 0x08, 0x08, 0x08, 0x0F, 0x07, 0x00  , // J
 0x01, 0xFF, 0xFF, 0x70, 0xD8, 0x8C, 0x07, 0x03 ,0x08, 0x0F, 0x0F, 0x00, 0x00, 0x01, 0x0F, 0x0E  , // K
 0x01, 0xFF, 0xFF, 0x01, 0x00, 0x00, 0x00, 0x00, 0x08, 0x0F, 0x0F, 0x08, 0x08, 0x08, 0x0C, 0x0C  , // L
 0xFF, 0xFF, 0x0C, 0x78, 0x78, 0x0C, 0xFF, 0xFF, 0x0F, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x0F  , // M
 0xFF, 0xFF, 0x1C, 0x38, 0x70, 0xE0, 0xFF, 0xFF, 0x0F, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x0F  , // N
 0xFE, 0xFF, 0x01, 0x01, 0x01, 0x01, 0xFF, 0xFE, 0x07, 0x0F, 0x08, 0x08, 0x08, 0x08, 0x0F, 0x07  , // O
 0x01, 0xFF, 0xFF, 0x21, 0x21, 0x21, 0x3F, 0x1E, 0x08, 0x0F, 0x0F, 0x08, 0x00, 0x00, 0x00, 0x00  , // P
 0xFE, 0xFF, 0x01, 0x01, 0x01, 0x01, 0xFF, 0xFE, 0x07, 0x0F, 0x08, 0x0E, 0x1C, 0x38, 0x2F, 0x07  , // Q
 0x01, 0xFF, 0xFF, 0x21, 0x21, 0x61, 0xFF, 0x9E, 0x08, 0x0F, 0x0F, 0x08, 0x00, 0x00, 0x0F, 0x0F  , // R
 0x0E, 0x1F, 0x31, 0x21, 0x21, 0x61, 0xC7, 0x86, 0x06, 0x0E, 0x08, 0x08, 0x08, 0x08, 0x0F, 0x07  , // S
 0x03, 0x03, 0x01, 0xFF, 0xFF, 0x01, 0x03, 0x03, 0x00, 0x00, 0x08, 0x0F, 0x0F, 0x08, 0x00, 0x00  , // T
 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x07, 0x0F, 0x08, 0x08, 0x08, 0x08, 0x0F, 0x07  , // U
 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x01, 0x03, 0x06, 0x0C, 0x0C, 0x06, 0x03, 0x01  , // V
 0xFF, 0xFF, 0x00, 0xE0, 0xE0, 0x00, 0xFF, 0xFF, 0x01, 0x0F, 0x0E, 0x03, 0x03, 0x0E, 0x0F, 0x01  , // W
 0x07, 0x0F, 0x98, 0xF0, 0xF0, 0x98, 0x0F, 0x07, 0x0E, 0x0F, 0x01, 0x00, 0x00, 0x01, 0x0F, 0x0E  , // X
 0x0F, 0x1F, 0x30, 0xE0, 0xE0, 0x30, 0x1F, 0x0F, 0x00, 0x00, 0x08, 0x0F, 0x0F, 0x08, 0x00, 0x00  , // Y
 0x03, 0x83, 0xC1, 0x61, 0x31, 0x19, 0x0F, 0x07, 0x0F, 0x0F, 0x08, 0x08, 0x08, 0x08, 0x0C, 0x0C  , // Z
 0x00, 0x00, 0xFF, 0xFF, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x0F, 0x08, 0x08, 0x00, 0x00  , // [
 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA  , // CHESS
 0x00, 0x00, 0x01, 0x01, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x08, 0x08, 0x0F, 0x0F, 0x00, 0x00  , // ]
 0x08, 0x0C, 0x06, 0x03, 0x03, 0x06, 0x0C, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00  , // ^
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10  , // _
 0x00, 0x00, 0x08, 0x0F, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00  , // `
 0x00, 0x90, 0x90, 0x90, 0x90, 0xF0, 0xE0, 0x00, 0x07, 0x0F, 0x08, 0x08, 0x08, 0x07, 0x0F, 0x08  , // a
 0x01, 0xFF, 0xFF, 0x10, 0x10, 0x30, 0xE0, 0xC0, 0x08, 0x0F, 0x07, 0x08, 0x08, 0x08, 0x0F, 0x07  , // b
 0xE0, 0xF0, 0x10, 0x10, 0x10, 0x10, 0x30, 0x20, 0x07, 0x0F, 0x08, 0x08, 0x08, 0x08, 0x0C, 0x04  , // c
 0xC0, 0xE0, 0x30, 0x10, 0x11, 0xFF, 0xFF, 0x00, 0x07, 0x0F, 0x08, 0x08, 0x08, 0x07, 0x0F, 0x08  , // d
 0xE0, 0xF0, 0x90, 0x90, 0x90, 0x90, 0xF0, 0xE0, 0x07, 0x0F, 0x08, 0x08, 0x08, 0x08, 0x0C, 0x04  , // e
 0x00, 0x10, 0xFE, 0xFF, 0x11, 0x11, 0x03, 0x02, 0x00, 0x08, 0x0F, 0x0F, 0x08, 0x00, 0x00, 0x00  , // f
 0xE0, 0xF0, 0x10, 0x10, 0x10, 0xE0, 0xF0, 0x10, 0x27, 0x6F, 0x48, 0x48, 0x48, 0x7F, 0x3F, 0x00  , // g
 0x01, 0xFF, 0xFF, 0x20, 0x10, 0x10, 0xF0, 0xE0, 0x08, 0x0F, 0x0F, 0x00, 0x00, 0x00, 0x0F, 0x0F  , // h
 0x00, 0x10, 0x10, 0xF6, 0xF6, 0x00, 0x00, 0x00, 0x00, 0x08, 0x08, 0x0F, 0x0F, 0x08, 0x08, 0x00  , // i
 0x00, 0x00, 0x10, 0x10, 0xF6, 0xF6, 0x00, 0x00, 0x30, 0x60, 0x40, 0x40, 0x7F, 0x3F, 0x00, 0x00  , // j
 0x01, 0xFF, 0xFF, 0xC0, 0xC0, 0x60, 0x30, 0x10, 0x08, 0x0F, 0x0F, 0x00, 0x01, 0x03, 0x0E, 0x0C  , // k
 0x00, 0x01, 0x01, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x08, 0x08, 0x0F, 0x0F, 0x08, 0x08, 0x00  , // l
 0xF0, 0xF0, 0x30, 0xE0, 0xE0, 0x30, 0xF0, 0xE0, 0x0F, 0x0F, 0x00, 0x07, 0x07, 0x00, 0x0F, 0x0F  , // m
 0x10, 0xF0, 0xE0, 0x10, 0x10, 0x10, 0xF0, 0xE0, 0x00, 0x0F, 0x0F, 0x00, 0x00, 0x00, 0x0F, 0x0F  , // n
 0xE0, 0xF0, 0x10, 0x10, 0x10, 0x10, 0xF0, 0xE0, 0x07, 0x0F, 0x08, 0x08, 0x08, 0x08, 0x0F, 0x07  , // o
 0x10, 0xF0, 0xE0, 0x10, 0x10, 0x10, 0xF0, 0xE0, 0x40, 0x7F, 0x7F, 0x48, 0x08, 0x08, 0x0F, 0x07  , // p
 0xE0, 0xF0, 0x10, 0x10, 0x10, 0xE0, 0xF0, 0x10, 0x07, 0x0F, 0x08, 0x08, 0x48, 0x7F, 0x7F, 0x40  , // q
 0x10, 0xF0, 0xE0, 0x10, 0x10, 0x10, 0x30, 0x20, 0x00, 0x0F, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x00  , // r
 0x60, 0xF0, 0x90, 0x90, 0x90, 0x10, 0x30, 0x20, 0x04, 0x0C, 0x08, 0x08, 0x09, 0x09, 0x0F, 0x06  , // s
 0x10, 0x10, 0xFE, 0xFF, 0x10, 0x10, 0x00, 0x00, 0x00, 0x00, 0x07, 0x0F, 0x08, 0x0C, 0x04, 0x00  , // t
 0xF0, 0xF0, 0x00, 0x00, 0x00, 0xF0, 0xF0, 0x00, 0x07, 0x0F, 0x08, 0x08, 0x08, 0x07, 0x0F, 0x08  , // u
 0xF0, 0xF0, 0x00, 0x00, 0x00, 0x00, 0xF0, 0xF0, 0x01, 0x03, 0x06, 0x0C, 0x0C, 0x06, 0x03, 0x01  , // v
 0xF0, 0xF0, 0x00, 0x80, 0x80, 0x00, 0xF0, 0xF0, 0x07, 0x0F, 0x0C, 0x07, 0x07, 0x0C, 0x0F, 0x07  , // w
 0x10, 0x30, 0x60, 0xC0, 0xC0, 0x60, 0x30, 0x10, 0x08, 0x0C, 0x06, 0x03, 0x03, 0x06, 0x0C, 0x08  , // x
 0xF0, 0xF0, 0x00, 0x00, 0x00, 0x00, 0xF0, 0xF0, 0x47, 0x4F, 0x48, 0x48, 0x48, 0x68, 0x3F, 0x1F  , // y
 0x30, 0x30, 0x10, 0x90, 0xD0, 0x70, 0x30, 0x10, 0x0C, 0x0E, 0x0B, 0x09, 0x08, 0x08, 0x0C, 0x0C }   // z
;

const  char font[1024] = {
0x00, 0x00, 0x00, 0x00, 0x00,// (space)
0x00, 0x00, 0x5F, 0x00, 0x00,// !
0x00, 0x07, 0x00, 0x07, 0x00,// "
0x14, 0x7F, 0x14, 0x7F, 0x14,// #
0x24, 0x2A, 0x7F, 0x2A, 0x12,// $
0x23, 0x13, 0x08, 0x64, 0x62,// %
0x36, 0x49, 0x55, 0x22, 0x50,// &
0x00, 0x05, 0x03, 0x00, 0x00,// '
0x00, 0x1C, 0x22, 0x41, 0x00,// (
0x00, 0x41, 0x22, 0x1C, 0x00,// )
0x08, 0x2A, 0x1C, 0x2A, 0x08,// *
0x08, 0x08, 0x3E, 0x08, 0x08,// +
0x00, 0x50, 0x30, 0x00, 0x00,// ,
0x08, 0x08, 0x08, 0x08, 0x08,// -
0x00, 0x30, 0x30, 0x00, 0x00,// .
0x20, 0x10, 0x08, 0x04, 0x02,// /
0x3E, 0x51, 0x49, 0x45, 0x3E,// 0
0x00, 0x42, 0x7F, 0x40, 0x00,// 1
0x42, 0x61, 0x51, 0x49, 0x46,// 2
0x21, 0x41, 0x45, 0x4B, 0x31,// 3
0x18, 0x14, 0x12, 0x7F, 0x10,// 4
0x27, 0x45, 0x45, 0x45, 0x39,// 5
0x3C, 0x4A, 0x49, 0x49, 0x30,// 6
0x01, 0x71, 0x09, 0x05, 0x03,// 7
0x36, 0x49, 0x49, 0x49, 0x36,// 8
0x06, 0x49, 0x49, 0x29, 0x1E,// 9
0x00, 0x36, 0x36, 0x00, 0x00,// :
0x00, 0x56, 0x36, 0x00, 0x00,// ;
0x00, 0x08, 0x14, 0x22, 0x41,// <
0x14, 0x14, 0x14, 0x14, 0x14,// =
0x41, 0x22, 0x14, 0x08, 0x00,// >
0x02, 0x01, 0x51, 0x09, 0x06,// ?
0x32, 0x49, 0x79, 0x41, 0x3E,// @
0x7E, 0x11, 0x11, 0x11, 0x7E,// A
0x7F, 0x49, 0x49, 0x49, 0x36,// B
0x3E, 0x41, 0x41, 0x41, 0x22,// C
0x7F, 0x41, 0x41, 0x22, 0x1C,// D
0x7F, 0x49, 0x49, 0x49, 0x41,// E
0x7F, 0x09, 0x09, 0x01, 0x01,// F
0x3E, 0x41, 0x41, 0x51, 0x32,// G
0x7F, 0x08, 0x08, 0x08, 0x7F,// H
0x00, 0x41, 0x7F, 0x41, 0x00,// I
0x20, 0x40, 0x41, 0x3F, 0x01,// J
0x7F, 0x08, 0x14, 0x22, 0x41,// K
0x7F, 0x40, 0x40, 0x40, 0x40,// L
0x7F, 0x02, 0x04, 0x02, 0x7F,// M
0x7F, 0x04, 0x08, 0x10, 0x7F,// N
0x3E, 0x41, 0x41, 0x41, 0x3E,// O
0x7F, 0x09, 0x09, 0x09, 0x06,// P
0x3E, 0x41, 0x51, 0x21, 0x5E,// Q
0x7F, 0x09, 0x19, 0x29, 0x46,// R
0x46, 0x49, 0x49, 0x49, 0x31,// S
0x01, 0x01, 0x7F, 0x01, 0x01,// T
0x3F, 0x40, 0x40, 0x40, 0x3F,// U
0x1F, 0x20, 0x40, 0x20, 0x1F,// V
0x7F, 0x20, 0x18, 0x20, 0x7F,// W
0x63, 0x14, 0x08, 0x14, 0x63,// X
0x03, 0x04, 0x78, 0x04, 0x03,// Y
0x61, 0x51, 0x49, 0x45, 0x43,// Z
0x00, 0x00, 0x7F, 0x41, 0x41,// [
0x02, 0x04, 0x08, 0x10, 0x20,// "\"
0x41, 0x41, 0x7F, 0x00, 0x00,// ]
0x04, 0x02, 0x01, 0x02, 0x04,// ^
0x40, 0x40, 0x40, 0x40, 0x40,// _
0x00, 0x01, 0x02, 0x04, 0x00,// `
0x20, 0x54, 0x54, 0x54, 0x78,// a
0x7F, 0x48, 0x44, 0x44, 0x38,// b
0x38, 0x44, 0x44, 0x44, 0x20,// c
0x38, 0x44, 0x44, 0x48, 0x7F,// d
0x38, 0x54, 0x54, 0x54, 0x18,// e
0x08, 0x7E, 0x09, 0x01, 0x02,// f
0x08, 0x14, 0x54, 0x54, 0x3C,// g
0x7F, 0x08, 0x04, 0x04, 0x78,// h
0x00, 0x44, 0x7D, 0x40, 0x00,// i
0x20, 0x40, 0x44, 0x3D, 0x00,// j
0x00, 0x7F, 0x10, 0x28, 0x44,// k
0x00, 0x41, 0x7F, 0x40, 0x00,// l
0x7C, 0x04, 0x18, 0x04, 0x78,// m
0x7C, 0x08, 0x04, 0x04, 0x78,// n
0x38, 0x44, 0x44, 0x44, 0x38,// o
0x7C, 0x14, 0x14, 0x14, 0x08,// p
0x08, 0x14, 0x14, 0x18, 0x7C,// q
0x7C, 0x08, 0x04, 0x04, 0x08,// r
0x48, 0x54, 0x54, 0x54, 0x20,// s
0x04, 0x3F, 0x44, 0x40, 0x20,// t
0x3C, 0x40, 0x40, 0x20, 0x7C,// u
0x1C, 0x20, 0x40, 0x20, 0x1C,// v
0x3C, 0x40, 0x30, 0x40, 0x3C,// w
0x44, 0x28, 0x10, 0x28, 0x44,// x
0x0C, 0x50, 0x50, 0x50, 0x3C,// y
0x44, 0x64, 0x54, 0x4C, 0x44,// z
0x00, 0x08, 0x36, 0x41, 0x00,// {
0x00, 0x00, 0x7F, 0x00, 0x00,// |
0x00, 0x41, 0x36, 0x08, 0x00,// }
0x08, 0x08, 0x2A, 0x1C, 0x08,// ->
0x08, 0x1C, 0x2A, 0x08, 0x08 // <-
};

unsigned char m,n;
unsigned int match_value,pauza,pauza2,brojac,br1,br2,br3;//deo za frekvenciju prekida tajmera*/

void SetRST(unsigned char vrednost);
void SetE(unsigned char vrednost);
void SetRW(unsigned char vrednost);
void SetRS(unsigned char vrednost);
void SetCS2(unsigned char vrednost);
void SetCS1(unsigned char vrednost);
void ConfigureAllPins (void);
void ConfigureLcdData(unsigned char direction);
void SetLcdData(unsigned char vrednost);
unsigned char ReadLcdData(void);


void strobe_data(void);

void LcdInstructionWrite (unsigned char u8Instruction);
void LcdDelay(unsigned int u32Duration);
void LcdWaitBusy (void);
void GoToY(unsigned char y);
void GoToX(unsigned char x);
void GoToXY(unsigned char x,unsigned char y);
void LcdSelectStartline(unsigned char startna_linija);
void LcdSelectSide(unsigned char u8LcdSide);
unsigned char LcdDataRead (void);
void GLCD_LcdInit(void);
void LcdDataWrite (unsigned char u8Data);
void GLCD_ClrScr (void);
void GLCD_FillScr (void);
void GLCD_DisplayPicture (unsigned char *slika);
void LcdSetDot (unsigned char u8Xaxis, unsigned char u8Yaxis);
void LcdResDot (unsigned char u8Xaxis, unsigned char u8Yaxis);
void GLCD_Circle (unsigned char u8CenterX, unsigned char u8CenterY, unsigned char u8Radius);
void GLCD_Rectangle (unsigned char u8Xaxis1,unsigned char u8Yaxis1,unsigned char u8Xaxis2,unsigned char u8Yaxis2);
void Glcd_PutChar (char AskiKod);
void Glcd_PutCharBig (char AskiKod);
void GLCD_Printf (char *au8Text);
void GLCD_ShowGreed(unsigned char razmak_greeda);
/*
void SetRST(unsigned char vrednost)
{
	if (vrednost)
		RF5_1
	else
		RF5_0
}

void SetE(unsigned char vrednost)
{
	if (vrednost)
		RF4_1
	else
		RF4_0
}

void SetRW(unsigned char vrednost)
{
	if (vrednost)
		RF1_1
	else
		RF1_0
}

void SetRS(unsigned char vrednost)
{
	if (vrednost)
		RF0_1
	else
		RF0_0
}

void SetCS2(unsigned char vrednost)
{
	if (vrednost)
		RB5_1
	else
		RB5_0
}

void SetCS1(unsigned char vrednost)
{
	if (vrednost)
		RB4_1
	else
		RB4_0
}


void ConfigureAllPins (void)
{
	TRISFbits.TRISF5=0;//LCD_RST izlaz
	TRISFbits.TRISF4=0;//LCD_E izlaz
	TRISFbits.TRISF1=0;//LCD_RW izlaz
	TRISFbits.TRISF0=0;//LCD_DI izlaz
	ADPCFGbits.PCFG5=1;
	TRISBbits.TRISB5=0;//LCD_CS2 izlaz
					/* PCFG<15:0>: Analog Input Pin Configuration Control bits
						1 = Analog input pin in Digital mode, port read input enabled, A/D input multiplexer input connected to AVSS
						0 = Analog input pin in Analog mode, port read input disabled, A/D samples pin voltage*/ /*
	ADPCFGbits.PCFG4=1;
	TRISBbits.TRISB4=0;//LCD_CS1 izlaz
					/* PCFG<15:0>: Analog Input Pin Configuration Control bits
						1 = Analog input pin in Digital mode, port read input enabled, A/D input multiplexer input connected to AVSS
						0 = Analog input pin in Analog mode, port read input disabled, A/D samples pin voltage*/
	
	//LCD_DATA	P2//RB0 RB1 RB2 RB3 RD0 RD1 RD2 RD3 
/*
ADPCFGbits.PCFG0=1;
TRISBbits.TRISB0=0;//RB0
ADPCFGbits.PCFG1=1;
TRISBbits.TRISB1=0;//RB1
ADPCFGbits.PCFG2=1;
TRISBbits.TRISB2=0;//RB2
ADPCFGbits.PCFG3=1;
TRISBbits.TRISB3=0;//RB3

TRISDbits.TRISD0=0;//RD0
TRISDbits.TRISD1=0;//RD1
TRISDbits.TRISD2=0;//RD2
TRISDbits.TRISD3=0;//RD3
	
}

void ConfigureLcdData(unsigned char direction)
{
	//LCD_DATA	P2//RB0 RB1 RB2 RB3 RD0 RD1 RD2 RD3
if(direction==output)
	{
	//LCD_DATA OUTPUT
	TRISDbits.TRISD0=output;//RD0
	TRISDbits.TRISD1=output;//RD1
	TRISDbits.TRISD2=output;//RD2
	TRISDbits.TRISD3=output;//RD3
	TRISBbits.TRISB3=output;//RB3
	TRISBbits.TRISB2=output;//RB2
	TRISBbits.TRISB1=output;//RB1
	TRISBbits.TRISB0=output;//RB0
	}
if (direction==input)
	{
		//LCD_DATA INPUT
	TRISDbits.TRISD0=input;//RD0
	TRISDbits.TRISD1=input;//RD1
	TRISDbits.TRISD2=input;//RD2
	TRISDbits.TRISD3=input;//RD3
	TRISBbits.TRISB3=input;//RB3
	TRISBbits.TRISB2=input;//RB2
	TRISBbits.TRISB1=input;//RB1
	TRISBbits.TRISB0=input;//RB0
	}

}

void SetLcdData(unsigned char vrednost)
{
	unsigned char pomocna,pomocna2;
	//LCD_DATA	lsb RB0 RB1 RB2 RB3 RD0 RD1 RD2 RD3 msb
pomocna=vrednost;
	LATD&=0xfff0;
	LATB&=0xfff0;
pomocna2=pomocna&0x0f;
	LATB|=pomocna2;
	pomocna=pomocna/16;
	LATD|=pomocna;
}

unsigned char ReadLcdData(void)
{
	//LCD_DATA	P2//RB0 RB1 RB2 RB3 RD0 RD1 RD2 RD3
	unsigned char pomocna,vrednost;
	pomocna=PORTD;
	pomocna=pomocna*16;
	vrednost=PORTB;
	vrednost&=0x0f;
	vrednost+=pomocna;
	return vrednost;
	
}


/*-------------------------------------------------------------------------------
Tempo for the LCD timing
	pause()
-------------------------------------------------------------------------------*/

/*

void strobe_data(void)
{
	SetE(1);		/* Strobe */
  //	LcdDelay(1);//////////radi cak i bez njega--------------------------------------------------------------------------------------
/*
	SetE(0);
}

void LcdInstructionWrite (unsigned char u8Instruction)
{
  	//LcdWaitBusy ();		// wait until LCD not busy --------------------------------------------------------------------------------
   	SetRS(0);       	/* Instruction mode */
/*
  	SetRW(0);       	/* Write mode */
  	//SetLcdData(u8Instruction);/* outbyte */
	//strobe_data();
//}


/*-------------------------------------------------------------------------------
Tempo for the LCD timing
	pause()
-------------------------------------------------------------------------------*/









#ifdef	__cplusplus
extern "C" {
#endif




#ifdef	__cplusplus
}
#endif

#endif	/* GLCD_H */

